// Generated by CoffeeScript 1.6.2
var Cursor, Model, SocketModel, oa, oo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require('knockout');

oo = ko.observable;

oa = ko.observableArray;

Cursor = (function() {
  function Cursor(api, func_name, query, cb) {
    this.update = __bind(this.update, this);    this.api = api;
    this.func_name = func_name;
    this.query = query;
    this.val = oo(false);
    this.docs = oa([]);
    this._docs = {};
    this.last_err = oo(false);
    this.errors = oa([]);
    this.cb = cb;
  }

  Cursor.prototype.update = function() {
    return this.api[this.func_name](this.query, this.cb, this);
  };

  return Cursor;

})();

Model = (function() {
  function Model(options) {
    this.count = __bind(this.count, this);
    this.find = __bind(this.find, this);
    this.remove = __bind(this.remove, this);
    this.update = __bind(this.update, this);
    this.create = __bind(this.create, this);
    this._debug_error = __bind(this._debug_error, this);
    this.validate = __bind(this.validate, this);    this.name_space = options.name_space;
    this.collection_name = options.collection_name;
    this.model = options.model;
    this._docs = {};
    this.cursors = [];
    this.last_err = oo(false);
    this.errors = oa([]);
    this.last_validate_err = oo(false);
    this.validate_errors = oa([]);
  }

  Model.prototype.validate = function(doc) {
    var atrs, data, key, msg, valid, _i, _len, _ref,
      _this = this;
    for (key in this.model) {
      atrs = this.model[key];
      if (atrs.required) {
        if (!doc[key]) {
          msg = 'required field: ' + key;
          this.validate_errors.push(msg);
          this.last_validate_err(msg);
          return false;
        }
      }
      if (atrs.validate) {
        _ref = atrs.validate;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          valid = _ref[_i];
          data = false;
          valid.validator(doc[key], function(d) {
            return data = d;
          });
          if (!data) {
            this.validate_errors.push(valid.msg);
            this.last_validate_err(valid.msg);
            return false;
          }
        }
      }
    }
    this.last_validate_err(false);
    return true;
  };

  Model.prototype._debug_error = function(err, options) {
    this.last_err(err);
    if (err) {
      console.log(err);
      return this.errors.push(err);
    } else {
      console.log('success');
      if (options) {
        return console.log(options);
      }
    }
  };

  Model.prototype.create = function(query, cb, fn) {
    var _this = this;
    if (!this.validate(query.doc)) {
      if (cb) {
        cb(this.last_validate_err());
      }
      return false;
    }
    return function(err) {
      if (cb) {
        cb(err);
      }
      return _this._debug_error(err);
    };
  };

  Model.prototype.update = function(query, cb) {
    var _this = this;
    if (query.update) {
      delete query.update["_id"];
    }
    return function(err) {
      if (cb) {
        cb(err);
      }
      return _this._debug_error(err);
    };
  };

  Model.prototype.remove = function(query, cb) {
    var _this = this;
    return function(err) {
      if (cb) {
        cb(err);
      }
      return _this._debug_error(err);
    };
  };

  Model.prototype.find = function(query, cb, cursor) {
    var conditions, fields, options,
      _this = this;
    conditions = query.conditions;
    fields = query.fields;
    options = query.options;
    if (cursor == null) {
      cursor = new Cursor(this, 'find', query, cb);
      this.cursors.push(cursor);
    }
    return {
      cursor: cursor,
      cb: function(err, docs) {
        var doc, _i, _len;
        console.log('find', docs, err);
        cursor.last_err = err;
        if (err) {
          cursor.err.push(err);
        }
        cursor.docs(docs);
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          doc = docs[_i];
          _this._docs[doc["_id"]] = doc;
          cursor._docs[doc["_id"]] = doc;
        }
        if (cb) {
          cb(err, docs);
        }
        return _this._debug_error(err, docs);
      }
    };
  };

  Model.prototype.count = function(query, cb, cursor) {
    var conditions,
      _this = this;
    conditions = query.conditions;
    if (cursor == null) {
      cursor = new Cursor(this, 'count', query, cb);
      this.cursors.push(cursor);
    }
    return {
      cursor: cursor,
      cb: function(err, count) {
        cursor.last_err = err;
        if (err) {
          cursor.err.push(err);
        }
        cursor.val(count);
        if (cb) {
          cb(err, count);
        }
        return _this._debug_error(err, count);
      }
    };
  };

  return Model;

})();

SocketModel = (function(_super) {
  __extends(SocketModel, _super);

  SocketModel.create_socket = function(name_space, io) {
    var socket;
    socket = io.connect('/socket_api_' + name_space);
    return socket;
  };

  function SocketModel(options) {
    this.count = __bind(this.count, this);
    this.find = __bind(this.find, this);
    this.remove = __bind(this.remove, this);
    this.update = __bind(this.update, this);
    this.create = __bind(this.create, this);
    this._event = __bind(this._event, this);
    var _this = this;
    SocketModel.__super__.constructor.call(this, options);
    this.socket = options.socket;
    this.socket.on('connect', function() {
      return console.log('-- connected --', _this.name_space);
    });
    this.socket.on(this._event('update'), function(data) {
      var cursor, _i, _len, _ref, _results;
      _ref = _this.cursors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cursor = _ref[_i];
        _results.push(cursor.update());
      }
      return _results;
    });
  }

  SocketModel.prototype._event = function(name) {
    return this.collection_name + " " + name;
  };

  SocketModel.prototype.create = function(query, cb) {
    var _cb;
    _cb = SocketModel.__super__.create.call(this, query, cb);
    if (!_cb) {
      return false;
    }
    this.socket.emit(this._event('create'), query, _cb);
    return true;
  };

  SocketModel.prototype.update = function(query, cb) {
    var _cb;
    _cb = SocketModel.__super__.update.call(this, query, cb);
    return this.socket.emit(this._event('update'), query, _cb);
  };

  SocketModel.prototype.remove = function(query, cb) {
    var _cb;
    _cb = SocketModel.__super__.remove.call(this, query, cb);
    return this.socket.emit(this._event('remove'), query, _cb);
  };

  SocketModel.prototype.find = function(query, cb, cursor) {
    var temp, _cb;
    temp = SocketModel.__super__.find.call(this, query, cb, cursor);
    cursor = temp.cursor;
    _cb = temp.cb;
    this.socket.emit(this._event('find'), query, _cb);
    return cursor;
  };

  SocketModel.prototype.count = function(query, cb, cursor) {
    var temp, _cb;
    temp = SocketModel.__super__.count.call(this, query, cb, cursor);
    cursor = temp.cursor;
    _cb = temp.cb;
    this.socket.emit(this._event('count'), query, _cb);
    return cursor;
  };

  return SocketModel;

}).call(this, Model);

exports.SocketModel = SocketModel;
